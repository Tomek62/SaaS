import { NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import { render } from '@react-email/render'; // Render email templates
import VerificationEmail from '@/emails/VerificationEmail'; // Import the component correctly

// Define a type for the request body
interface VerificationRequest {
  email: string;
  verificationCode: string;
}

export async function POST(req: Request) {
  const { email, verificationCode }: VerificationRequest = await req.json();

  // Validate input
  if (!email || !verificationCode) {
    return NextResponse.json({ error: 'Email and le code de v√©rification sont requis. ' }, { status: 400 });
  }

  // Configure Nodemailer transporter (using Gmail as an example)
  const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.GMAIL_USER, // Set in .env
      pass: process.env.GMAIL_PASS, // Set in .env
    },
  });

  // Render email content with React Email
  const emailHtml = await render(VerificationEmail({ code: verificationCode }));

  // Configure the email options
  const mailOptions = {
    from: 'thomas.lefebvre@foodpoint.fr', // Sender's address
    to: email, // Receiver's email
    subject: 'Email Verification Code',
    html: emailHtml, // Email content generated by React Email
  };

  try {
    // Send email
    await transporter.sendMail(mailOptions);
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Error sending email:', error);
    return NextResponse.json({ error: 'Failed to send verification email.' }, { status: 500 });
  }
}
